package bot

import (
	"botus/internal/database"
	"botus/internal/session"
	"database/sql"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"log"
	"os"
	"runtime"
	"strings"
	"sync"
	"time"
)

// handleBlockedUser –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func handleBlockedUser(session *session.UserSession, msg *tgbotapi.MessageConfig) {
	msg.Text = fmt.Sprintf("üîí –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ %d —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–Ω—è—Ç–∞.", session.BlockedUntil.Sub(time.Now()).Seconds())
}

// handleUserInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func handleUserInput(update tgbotapi.Update, msg *tgbotapi.MessageConfig, userSessions map[int64]*session.UserSession, userID int64, db *sql.DB) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if _, exists := userSessions[userID]; !exists {
		userSessions[userID] = session.NewUserSession(userID, "")
	}

	session := userSessions[userID]

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
	if session.IsBlocked() {
		handleBlockedUser(session, msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("/register"),
			tgbotapi.NewKeyboardButton("/login"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("/list_users"),
			tgbotapi.NewKeyboardButton("/calculate_parallel"),
		),
	)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
	msg.ReplyMarkup = keyboard

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	if strings.HasPrefix(update.Message.Text, "/register") {
		err := registerUser(update.Message.Text, db, update.Message.Chat.ID)
		if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + err.Error()
		} else {
			msg.Text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /login."
			notifyAdmin(fmt.Sprintf("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è: %s", strings.Fields(update.Message.Text)[1]))
		}
	} else if strings.HasPrefix(update.Message.Text, "/login") {
		err := loginUser(update.Message.Text, db, session)
		if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: " + err.Error()
		} else {
			msg.Text = "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!"
		}
	} else if strings.HasPrefix(update.Message.Text, "/list_users") {
		users, err := database.GetAllUsers(db)
		if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + err.Error()
		} else {
			if len(users) == 0 {
				msg.Text = "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
			} else {
				msg.Text = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + strings.Join(users, "\n")
			}
		}
	} else if strings.HasPrefix(update.Message.Text, "/calculate_parallel") {
		n := 10000000 // –ù–∞–ø—Ä–∏–º–µ—Ä, 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤
		start := time.Now()
		parallelResult := ParallelSumOfSquares(n)
		duration := time.Since(start)
		msg.Text = fmt.Sprintf("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: %d, –≤—Ä–µ–º—è: %v", parallelResult, duration)
	} else {
		msg.Text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é."
	}
}

// registerUser —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func registerUser(input string, db *sql.DB, chatID int64) error {
	// –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
	parts := strings.Fields(input)
	if len(parts) != 3 { // /register <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
	}
	username := parts[1]
	password := parts[2]

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if !database.RegisterUser(username, password, db, chatID) {
		return fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
	}
	return nil
}

// loginUser –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func loginUser(input string, db *sql.DB, session *session.UserSession) error {
	// –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
	parts := strings.Fields(input)
	if len(parts) != 3 { // /login <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
	}
	username := parts[1]
	password := parts[2]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
	if !database.CheckUserCredentials(username, password, db) {
		session.BlockUser(10 * time.Second)
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
	}

	session.Username = username
	session.ResetAttempts()
	return nil
}

// notifyAdmin –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func notifyAdmin(message string) {
	botToken := os.Getenv("BOT_TOKEN")
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Printf("Failed to create bot for notification: %v", err)
		return
	}

	msg := tgbotapi.NewMessageToChannel(adminChatID, message)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("Failed to send notification to admin: %v", err)
	}
}

// ParallelSumOfSquares –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
func ParallelSumOfSquares(n int) int {
	var wg sync.WaitGroup
	numCPU := runtime.NumCPU()
	chunkSize := n / numCPU
	results := make([]int, numCPU)

	for i := 0; i < numCPU; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			start := i * chunkSize
			end := start + chunkSize
			if i == numCPU-1 {
				end = n // –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫
			}
			sum := 0
			for j := start + 1; j <= end; j++ {
				sum += j * j
			}
			results[i] = sum
		}(i)
	}

	wg.Wait()

	total := 0
	for _, result := range results {
		total += result
	}
	return total
}
